#pragma checksum "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3d68c39c2684ab6c0a57d221af2a21dfc51b3214"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_ListGroupFunctions), @"mvc.1.0.view", @"/Views/Home/ListGroupFunctions.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Project\odin_cms\ODIN_CMS\Views\_ViewImports.cshtml"
using ODIN_CMS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Project\odin_cms\ODIN_CMS\Views\_ViewImports.cshtml"
using ODIN_CMS.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
using DataAccess.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
using Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
using ODIN_CMS.Controllers;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3d68c39c2684ab6c0a57d221af2a21dfc51b3214", @"/Views/Home/ListGroupFunctions.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e4022e19e6a211cba1262f2c61ee9349b44f7f5a", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_ListGroupFunctions : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<TreeDataFunction>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div class=""table-responsive"">
    <div class=""dataTables_wrapper form-inline"" role=""grid"">
        <table class=""table table-striped table-bordered table-hover table-condensed dataTable no-footer tree-2"">
            <thead>
                <tr>
                    <th style=""text-align:center"">Chức năng</th>
                    <th style=""text-align:center"">Url</th>
");
#nullable restore
#line 13 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
                     if (ViewBag.GroupID <= 3)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <th style=\"text-align:center\" width=\"5%\">ALL</th>\r\n");
#nullable restore
#line 16 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                    <th style=""text-align:center"" width=""5%"">Xem</th>
                    <th style=""text-align:center"" width=""5%"">Thêm</th>
                    <th style=""text-align:center"" width=""5%"">Sửa</th>
                    <th style=""text-align:center"" width=""5%"">Xóa</th>
                    <th style=""text-align:center"">Action</th>
                </tr>
            </thead>
            <tbody>
");
#nullable restore
#line 25 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
                 if (Model != null && Model.Count > 0)
                {
                    

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
               Write(Html.Raw(HomeController.GetChildUserFunctionGrant(Model)));

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
                                                                              
                }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"            </tbody>
        </table>
    </div>
</div>
<div class=""box-footer"">
    <button type=""button"" class=""btn btn-primary"" id=""btnSave"">
        <i class=""ti-save-alt""></i> Save Change
    </button>
</div>

<script type=""text/javascript"">
    $(document).ready(function () {

        var IsAdmin = parseInt('");
#nullable restore
#line 42 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
                           Write(ViewBag.GroupID);

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n        var FunctionID = 0;\r\n        var ListGrant = [];\r\n        var DelGrant = [];\r\n        var UserId = parseInt(\'");
#nullable restore
#line 46 "C:\Project\odin_cms\ODIN_CMS\Views\Home\ListGroupFunctions.cshtml"
                          Write(ViewBag.UserId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"');

        $('.tree-2').treegrid({
            expanderExpandedClass: 'glyphicon glyphicon-minus',
            expanderCollapsedClass: 'glyphicon glyphicon-plus'
        });
        $("".CheckAllGrant"").change(function (e) {
            var target = e.currentTarget;
            var me = $(this);
            var id = target.id;
            var data = $('.treegrid-' + id).treegrid('getChildNodes');
            var bool = me.prop('checked');
            $('.treegrid-' + id).find('input.CheckAllView').prop('checked', true);
            recursive(bool, data, 'CheckAllGrant', 'IsGrant');
            var parent = $('.treegrid-' + id).treegrid('getParentNode');

            parentCheck(parent, bool, 'input.CheckAllGrant', 'input.IsGrant');
        });
        $("".CheckAllView"").change(function (e) {
            var target = e.currentTarget;
            var me = $(this);
            var id = target.id;
            var data = $('.treegrid-' + id).treegrid('getChildNodes');
            var bool =");
            WriteLiteral(@" me.prop('checked');
            recursive(bool, data, 'CheckAllView', 'IsView');
            var parent = $('.treegrid-' + id).treegrid('getParentNode');

            if (!bool) {
                $("".treegrid-"" + id).find('input').prop('checked', false);
                if (IsAdmin <= 2) {
                    recursive(bool, data, 'CheckAllGrant', 'IsGrant');
                    parentCheck(parent, bool, 'input.CheckAllGrant', 'input.IsGrant');
                }

                recursive(bool, data, 'CheckAllInsert', 'IsInsert');
                recursive(bool, data, 'CheckAllUpdate', 'IsUpdate');
                recursive(bool, data, 'CheckAllDelete', 'IsDelete');

                parentCheck(parent, bool, 'input.CheckAllInsert', 'input.IsInsert');
                parentCheck(parent, bool, 'input.CheckAllUpdate', 'input.IsUpdate');
                parentCheck(parent, bool, 'input.CheckAllDelete', 'input.IsDelete');
            }
            parentCheck(parent, bool, 'input.CheckAllView',");
            WriteLiteral(@" 'input.IsView');
        });
        $("".CheckAllInsert"").change(function (e) {
            var target = e.currentTarget;
            var me = $(this);
            var id = target.id;
            var data = $('.treegrid-' + id).treegrid('getChildNodes');
            var bool = me.prop('checked');
            $('.treegrid-' + id).find('input.CheckAllView').prop('checked', true);
            recursive(bool, data, 'CheckAllInsert', 'IsInsert');
            var parent = $('.treegrid-' + id).treegrid('getParentNode');

            parentCheck(parent, bool, 'input.CheckAllInsert', 'input.IsInsert');
        });
        $("".CheckAllUpdate"").change(function (e) {
            var target = e.currentTarget;
            var me = $(this);
            var id = target.id;
            var data = $('.treegrid-' + id).treegrid('getChildNodes');
            var bool = me.prop('checked');
            $('.treegrid-' + id).find('input.CheckAllView').prop('checked', true);
            recursive(bool, data, 'Ch");
            WriteLiteral(@"eckAllUpdate', 'IsUpdate');
            var parent = $('.treegrid-' + id).treegrid('getParentNode');

            parentCheck(parent, bool, 'input.CheckAllUpdate', 'input.IsUpdate');
        });
        $("".CheckAllDelete"").change(function (e) {
            var target = e.currentTarget;
            var me = $(this);
            var id = target.id;
            var data = $('.treegrid-' + id).treegrid('getChildNodes');
            var bool = me.prop('checked');
            $('.treegrid-' + id).find('input.CheckAllView').prop('checked', true);
            recursive(bool, data, 'CheckAllDelete', 'IsDelete');
            var parent = $('.treegrid-' + id).treegrid('getParentNode');

            parentCheck(parent, bool, 'input.CheckAllDelete', 'input.IsDelete');
        });

        $("".IsGrant"").change(function (e) {
            var target = e.target;
            var id = target.id;
            var me = $(this);
            var parent = $('.treegrid-' + id).treegrid('getParentNode');
       ");
            WriteLiteral(@"     var parentId = $('.treegrid-' + id).treegrid('getParentNodeId');
            var $bool = me.prop('checked');
            $('.treegrid-' + id).find('input.IsView').prop('checked', true);
            parentCheck(parent, $bool, 'input.CheckAllGrant', 'input.IsGrant');
        });
        $("".IsView"").change(function (e) {
            var target = e.target;
            var id = target.id;
            var me = $(this);
            var parent = $('.treegrid-' + id).treegrid('getParentNode');
            var parentId = $('.treegrid-' + id).treegrid('getParentNodeId');
            var $bool = me.prop('checked');
            if (!$bool) {
                $("".treegrid-"" + id).find('input').prop('checked', false);
                if (IsAdmin <= 2) {
                    parentCheck(parent, $bool, 'input.CheckAllGrant', 'input.IsGrant');
                }
                parentCheck(parent, $bool, 'input.CheckAllInsert', 'input.IsInsert');
                parentCheck(parent, $bool, 'input.CheckAllUp");
            WriteLiteral(@"date', 'input.IsUpdate');
                parentCheck(parent, $bool, 'input.CheckAllDelete', 'input.IsDelete');
            }
            parentCheck(parent, $bool, 'input.CheckAllView', 'input.IsView');
        });
        $("".IsInsert"").change(function (e) {
            var target = e.target;
            var id = target.id;
            var me = $(this);
            var parent = $('.treegrid-' + id).treegrid('getParentNode');
            var parentId = $('.treegrid-' + id).treegrid('getParentNodeId');
            var $bool = me.prop('checked');
            $('.treegrid-' + id).find('input.IsView').prop('checked', true);
            parentCheck(parent, $bool, 'input.CheckAllInsert', 'input.IsInsert');
        });
        $("".IsUpdate"").change(function (e) {
            var target = e.target;
            var id = target.id;
            var me = $(this);
            var parent = $('.treegrid-' + id).treegrid('getParentNode');
            var parentId = $('.treegrid-' + id).treegrid('getParen");
            WriteLiteral(@"tNodeId');
            var $bool = me.prop('checked');
            $('.treegrid-' + id).find('input.IsView').prop('checked', true);
            parentCheck(parent, $bool, 'input.CheckAllUpdate', 'input.IsUpdate');
        });
        $("".IsDelete"").change(function (e) {
            var target = e.target;
            var id = target.id;
            var me = $(this);
            var parent = $('.treegrid-' + id).treegrid('getParentNode');
            var parentId = $('.treegrid-' + id).treegrid('getParentNodeId');
            var $bool = me.prop('checked');
            $('.treegrid-' + id).find('input.IsView').prop('checked', true);
            parentCheck(parent, $bool, 'input.CheckAllDelete', 'input.IsDelete');
        });

        $(""#btnSave"").click(function () {

            $("".tree-2"").find('.CheckView:checked').each(function () {
                var id = $(this).attr('id');

                var IsGrant = false;
                if (IsAdmin <=3) {
                    IsGrant = $("".t");
            WriteLiteral(@"reegrid-"" + id).find('.CheckGrant').prop('checked') ? true : false;
                }
                var IsView = $("".treegrid-"" + id).find('.CheckView').prop('checked') ? true : false;
                var IsInsert = $("".treegrid-"" + id).find('.CheckInsert').prop('checked') ? true : false;
                var IsUpdate = $("".treegrid-"" + id).find('.CheckUpdate').prop('checked') ? true : false;
                var IsDelete = $("".treegrid-"" + id).find('.CheckDelete').prop('checked') ? true : false;

                ListGrant.push({
                    FunctionId: id,
                    IsGrant: IsGrant,
                    IsView: IsView,
                    IsInsert: IsInsert,
                    IsUpdate: IsUpdate,
                    IsDelete: IsDelete
                });
            });
            if (IsAdmin > 3) {
                $("".tree-2"").find('.CheckView:not(:checked)').each(function () {
                    var id = $(this).attr('id');

                    DelGrant.push({
    ");
            WriteLiteral(@"                    FunctionId: id
                    });
                });
            }

            var paramInput = {
                GroupId: UserId,
                ListAddGrant: ListGrant,
                ListDelGrant: DelGrant
            };
            //console.log(paramInput);
            utils.Loading();
            $.ajax({
                type: 'POST',
                url: UrlRoot + ""Home/SaveGrantUser"",
                data: paramInput,
                //contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                async: true,
                success: function (data) {
                    debugger;
                    utils.unLoading();
                    if (data.responseCode >= 0) {
                        bootbox.alert(data.responseDesc);
                    }
                    else {
                        bootbox.alert(data.responseDesc);
                        return;
                    }
                }
       ");
            WriteLiteral(@"     });

        });

        // button báo cáo
        $("".GrantUserService"").click(function (e) {
            FunctionID = $(this).attr('id');
            if (FunctionID == null || FunctionID == undefined || FunctionID <= 0)
                return;
            $(""#btncheckAll"").html(""Check All"").attr(""data-check"", 1).removeClass(""btn-danger"").addClass(""btn-success"");
            bindTreeUserService(UserId, FunctionID);

        });
        $(""#btncheckAll"").click(function () {
            var check = parseInt($(this).attr(""data-check""));
            if (check == 1) {
                $(""#treeService"").treeview(""checkAll"");
                $(this).attr(""data-check"", 0);
                $(this).html(""Uncheck All"").removeClass(""btn-success"").addClass(""btn-danger"");
            }
            else {
                $(""#treeService"").treeview(""uncheckAll"");
                $(this).attr(""data-check"", 1);
                $(this).html(""Check All"").removeClass(""btn-danger"").addClass(""btn-succes");
            WriteLiteral(@"s"");
            }
        });
    });
    function collapseAll() {
        $('#treeService').treeview('collapseAll', { silent: true });
    }

    function ExpandeAll() {
        $('#treeService').treeview('expandAll', { levels: 1, silent: true });
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<TreeDataFunction>> Html { get; private set; }
    }
}
#pragma warning restore 1591
